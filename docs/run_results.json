{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.2", "generated_at": "2023-11-27T16:55:44.663427Z", "invocation_id": "35ce1d5b-f6a8-4a52-af4b-686e3896a52f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.114634Z", "completed_at": "2023-11-27T16:55:34.126331Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.131478Z", "completed_at": "2023-11-27T16:55:34.131492Z"}], "thread_id": "Thread-3", "execution_time": 0.1315929889678955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_with_channels_actual", "compiled": true, "compiled_code": "\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_path_summary_with_channels\n-- Using source() here to avoid a node error when the table is not found in the models/ folder (as it is created by the python script, not dbt). \n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.099245Z", "completed_at": "2023-11-27T16:55:34.129029Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.137308Z", "completed_at": "2023-11-27T16:55:34.137316Z"}], "thread_id": "Thread-2", "execution_time": 0.13927578926086426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_attribution_actual", "compiled": true, "compiled_code": "\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_attribution\n-- Using source() here to avoid a node error when the table is not found in the models/ folder (as it is created by the python script, not dbt). \n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.121657Z", "completed_at": "2023-11-27T16:55:34.129855Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.138479Z", "completed_at": "2023-11-27T16:55:34.138487Z"}], "thread_id": "Thread-4", "execution_time": 0.1375575065612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_report_table_actual", "compiled": true, "compiled_code": "\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_report_table\n-- Using source() here to avoid a node error when the table is not found in the models/ folder (as it is created by the python script, not dbt). \n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.148592Z", "completed_at": "2023-11-27T16:55:34.183673Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.185362Z", "completed_at": "2023-11-27T16:55:34.185371Z"}], "thread_id": "Thread-3", "execution_time": 0.043352365493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.test_path_transformations_data", "compiled": true, "compiled_code": "with data as (\n\n  select 'Example > Video > Direct > Direct' as path\n\n  union all\n\n  select 'Direct > Direct' as path\n\n  union all\n\n  select 'a > a > a > Direct > a > Direct > Direct'\n\n    union all\n\n  select 'Direct'\n\n  union all\n\n  select '' as path\n\n  union all\n\n  select 'Example > Video > Direct' as path\n\n  union all\n\n  select 'Example > Video > ' as path\n\n)\n\n\n\n, final_form as (\n\n  select\n     \n   split(d.path, ' > ')\n as transformed_path\n\n  from data d\n)\n\n\n\nselect\n\n *\n\nfrom final_form", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_data"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.158315Z", "completed_at": "2023-11-27T16:55:34.190172Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.195933Z", "completed_at": "2023-11-27T16:55:34.195942Z"}], "thread_id": "Thread-2", "execution_time": 0.05122733116149902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.test_path_transformations_expected", "compiled": true, "compiled_code": "with expected_result as (\n\n-- test remove_if_last_and_not_all (if not all the same)\n  select\n    'Example > Video > Direct > Direct' as raw_array,\n    'Direct' as trim_long_path,\n    'Direct > Direct' as trim_long_path2,\n    'Example > Video > Direct > Direct' as unique_path,\n    'Example(1) > Video(1) > Direct(2)' as frequency_path,\n    'Example > Video > Direct' as exposure_path,\n    'Example > Video > Direct' as first_path,\n    'Example > Video' as remove_if_not_all,\n    'Example > Video' as remove_if_last_and_not_all\n\n  union all\n\n-- test remove_if_last_and_not_all (if all the same)\n  select\n    'Direct > Direct' as raw_array,\n    'Direct' as trim_long_path,\n    'Direct > Direct' as trim_long_path2,\n    'Direct > Direct' as unique_path,\n    'Direct(2)' as frequency_path,\n    'Direct' as exposure_path,\n    'Direct' as first_path,\n    'Direct > Direct' as remove_if_not_all,\n    'Direct > Direct' as remove_if_last_and_not_all\n\n  union all\n\n-- test frequency_path with a long and varied > repeated pattern\n  select\n    'a > a > a > Direct > a > Direct > Direct' as raw_array,\n    'Direct' as trim_long_path,\n    'Direct > Direct' as trim_long_path2,\n    'a > a > a > Direct > a > Direct > Direct' as unique_path,\n    'a(4) > Direct(3)' as frequency_path,\n    'a > Direct > a > Direct' as exposure_path,\n    'a > Direct' as first_path,\n    'a > a > a > a' as remove_if_not_all,\n    'a > a > a > Direct > a' as remove_if_last_and_not_all\n\n  union all\n\n-- test one member scenario\n  select\n    'Direct' as raw_array,\n    'Direct' as trim_long_path,\n    'Direct' as trim_long_path2,\n    'Direct' as unique_path,\n    'Direct(1)' as frequency_path,\n    'Direct' as exposure_path,\n    'Direct' as first_path,\n    'Direct' as remove_if_not_all,\n    'Direct' as remove_if_last_and_not_all\n\n  union all\n\n-- test empty string scenario\n  select\n    '' as raw_array,\n    '' as trim_long_path,\n    '' as trim_long_path2,\n    '' as unique_path,\n    '(1)' as frequency_path,\n    '' as exposure_path,\n    '' as first_path,\n    '' as remove_if_not_all,\n    '' as remove_if_last_and_not_all\n\n  union all\n\n-- test all different scenario\n  select\n    'Example > Video > Direct' as raw_array,\n    'Direct' as trim_long_path,\n    'Video > Direct' as trim_long_path2,\n    'Example > Video > Direct' as unique_path,\n    'Example(1) > Video(1) > Direct(1)' as frequency_path,\n    'Example > Video > Direct' as exposure_path,\n    'Example > Video > Direct' as first_path,\n    'Example > Video' as remove_if_not_all,\n    'Example > Video' as remove_if_last_and_not_all\n\n  union all\n\n-- test mixed in with emtpy strings scenario\n  select\n    'Example > Video > ' as raw_array,\n    '' as trim_long_path,\n    'Video > ' as trim_long_path2,\n    'Example > Video > ' as unique_path,\n    'Example(1) > Video(1) > (1)' as frequency_path,\n    'Example > Video > ' as exposure_path,\n    'Example > Video > ' as first_path,\n    'Example > Video > ' as remove_if_not_all,\n    'Example > Video > ' as remove_if_last_and_not_all\n\n)\n\n\n\n , arrays as (\n\n  select\n    \n   split(e.raw_array, ' > ')\n as raw_array,\n    \n   split(e.trim_long_path, ' > ')\n as trim_long_path,\n    \n   split(e.trim_long_path2, ' > ')\n as trim_long_path2,\n    \n   split(e.unique_path, ' > ')\n as unique_path,\n    \n   split(e.frequency_path, ' > ')\n as frequency_path,\n    \n   split(e.exposure_path, ' > ')\n as exposure_path,\n    \n   split(e.first_path, ' > ')\n as first_path,\n    \n   split(e.remove_if_not_all, ' > ')\n as remove_if_not_all,\n    \n   split(e.remove_if_last_and_not_all, ' > ')\n as remove_if_last_and_not_all\n\n  from expected_result e\n)\n\nselect\n  \n    array_to_string(a.raw_array,' > ')\n as raw_array,\n  \n    array_to_string(a.trim_long_path,' > ')\n as trim_long_path,\n  \n    array_to_string(a.trim_long_path2,' > ')\n as trim_long_path2,\n  \n    array_to_string(a.unique_path,' > ')\n as unique_path,\n  \n    array_to_string(a.frequency_path,' > ')\n as frequency_path,\n  \n    array_to_string(a.exposure_path,' > ')\n as exposure_path,\n  \n    array_to_string(a.first_path,' > ')\n as first_path,\n  \n    array_to_string(a.remove_if_not_all,' > ')\n as remove_if_not_all,\n  \n    array_to_string(a.remove_if_last_and_not_all,' > ')\n as remove_if_last_and_not_all\n\nfrom arrays a\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_expected"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.168606Z", "completed_at": "2023-11-27T16:55:34.194977Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.199671Z", "completed_at": "2023-11-27T16:55:34.199679Z"}], "thread_id": "Thread-4", "execution_time": 0.05475616455078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.test_time_limits_actual", "compiled": true, "compiled_code": "/* these test cases should help understand how the upper and lower limits work for developers\n   integration test data when processed by the web model results in '2022-06-03 04:44:32.000' as first_pageview, '2022-08-01 05:37:27.000' as last_pageview\n   illustration: user would like to cover the conversion window between '2022-07-03' and '2022-07-31' (both are inclusive), this covers 29 days\n   using the default 30 days lookback period we should process pageview data from '2022-06-03' */\n\n\n\n    with case1 as\n        (with base as (\n            select max(start_tstamp) as last_pageview\n            from gh_sp_fract_dbt_1_derived.snowplow_web_page_views\n         )\n        select cast(\n\n    dateadd(\n        day,\n        -59,\n        last_pageview\n        )\n\n as date) as result, 'lower_limit' as limit_type, 'sessions' as model_type, 'auto' as update_type, 'case1' as test_case_number\n        from base\n    )\n\n    , case2 as (\n\n        with base as (\n        select cast('2022-07-03' as timestamp) as cw_tstamp\n        )\n        select cast(\n\n    dateadd(\n        day,\n        -30,\n        cw_tstamp\n        )\n\n as date) as result, 'lower_limit' as limit_type, 'sessions' as model_type, 'manual' as update_type, 'case2' as test_case_number\n        from base\n    )\n\n    , case3 as (\n      with base as (\n                select max(start_tstamp) as last_pageview\n                from gh_sp_fract_dbt_1_derived.snowplow_web_page_views\n            )\n        select cast(\n\n    dateadd(\n        day,\n        -1,\n        last_pageview\n        )\n\n as date) as result, 'upper_limit' as limit_type, 'sessions' as model_type, 'auto' as update_type, 'case3' as test_case_number\n        from base\n\n    )\n\n    , case4 as (\n\n    select cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'sessions' as model_type, 'manual' as update_type, 'case4' as test_case_number\n    )\n\n    , case5 as (\n          with base as (\n            select max(start_tstamp) as last_pageview\n            from gh_sp_fract_dbt_1_derived.snowplow_web_page_views\n          )\n        select cast( \n\n    dateadd(\n        day,\n        -29,\n        last_pageview\n        )\n\n as date) as result, 'lower_limit' as limit_type, 'conversions' as model_type, 'auto' as update_type, 'case5' as test_case_number\n        from base\n    )\n\n    , case6 as (\n\n    select cast('2022-07-03' as date) as result, 'lower_limit' as limit_type, 'conversions' as model_type, 'manual' as update_type, 'case6' as test_case_number\n    )\n\n    , case7 as (\n\n        with base as (\n                select max(start_tstamp) as last_pageview\n                from gh_sp_fract_dbt_1_derived.snowplow_web_page_views\n            )\n        select cast(\n\n    dateadd(\n        day,\n        -1,\n        last_pageview\n        )\n\n as date) as result, 'upper_limit' as limit_type, 'conversions' as model_type, 'auto' as update_type, 'case7' as test_case_number\n        from base\n    )\n\n    , case8 as (\n\n        select cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'conversions' as model_type, 'manual' as update_type, 'case8' as test_case_number\n    )\n\n    select * from case1\n    union all\n    select * from case2\n    union all\n    select * from case3\n    union all\n    select * from case4\n    union all\n    select * from case5\n    union all\n    select * from case6\n    union all\n    select * from case7\n    union all\n    select * from case8", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_time_limits_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.191034Z", "completed_at": "2023-11-27T16:55:34.198826Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.204333Z", "completed_at": "2023-11-27T16:55:34.204340Z"}], "thread_id": "Thread-3", "execution_time": 0.018658876419067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.test_time_limits_expected", "compiled": true, "compiled_code": "select cast('2022-06-03' as date) as result, 'lower_limit' as limit_type, 'sessions' as model_type, 'auto' as update_type, 'case1' as test_case_number\nunion all\nselect cast('2022-06-03' as date) as result, 'lower_limit' as limit_type, 'sessions' as model_type, 'manual' as update_type, 'case2' as test_case_number\nunion all\nselect cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'sessions' as model_type, 'auto' as update_type, 'case3' as test_case_number\nunion all\nselect cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'sessions' as model_type, 'manual' as update_type, 'case4' as test_case_number\nunion all\nselect cast('2022-07-03' as date) as result, 'lower_limit' as limit_type, 'conversions' as model_type, 'auto' as update_type, 'case5' as test_case_number\nunion all\nselect cast('2022-07-03' as date) as result, 'lower_limit' as limit_type, 'conversions' as model_type, 'manual' as update_type, 'case6' as test_case_number\nunion all\nselect cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'conversions' as model_type, 'auto' as update_type, 'case7' as test_case_number\nunion all\nselect cast('2022-07-31' as date) as result, 'upper_limit' as limit_type, 'conversions' as model_type, 'manual' as update_type, 'case8' as test_case_number", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_time_limits_expected"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.209209Z", "completed_at": "2023-11-27T16:55:34.235543Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.251520Z", "completed_at": "2023-11-27T16:55:34.251531Z"}], "thread_id": "Thread-2", "execution_time": 0.05084562301635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_base_quarantined_sessions", "compiled": true, "compiled_code": "\n\n/*\nBoilerplate to generate table.\nTable updated as part of post-hook on sessions_this_run\nAny sessions exceeding max_session_days are quarantined\nOnce quarantined, any subsequent events from the session will not be processed.\nThis significantly reduces table scans\n*/\n\nwith prep as (\n  select\n    cast(null as \n    TEXT\n) session_id\n)\n\nselect *\n\nfrom prep\nwhere false", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_quarantined_sessions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.225951Z", "completed_at": "2023-11-27T16:55:34.248270Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.253104Z", "completed_at": "2023-11-27T16:55:34.253111Z"}], "thread_id": "Thread-4", "execution_time": 0.04819941520690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_incremental_manifest", "compiled": true, "compiled_code": "\n\n-- Boilerplate to generate table.\n-- Table updated as part of end-run hook\n\nwith prep as (\n  select\n    cast(null as \n    TEXT\n) model,\n    cast('1970-01-01' as timestamp) as last_success\n)\n\nselect *\n\nfrom prep\nwhere false", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_incremental_manifest"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.264812Z", "completed_at": "2023-11-27T16:55:34.267005Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.273080Z", "completed_at": "2023-11-27T16:55:34.273087Z"}], "thread_id": "Thread-2", "execution_time": 0.014127492904663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_attribution_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.267913Z", "completed_at": "2023-11-27T16:55:34.270711Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.273913Z", "completed_at": "2023-11-27T16:55:34.273920Z"}], "thread_id": "Thread-4", "execution_time": 0.014059305191040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_counts_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.282857Z", "completed_at": "2023-11-27T16:55:34.284903Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.290201Z", "completed_at": "2023-11-27T16:55:34.290212Z"}], "thread_id": "Thread-2", "execution_time": 0.012926340103149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_spend_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.285765Z", "completed_at": "2023-11-27T16:55:34.287767Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.291098Z", "completed_at": "2023-11-27T16:55:34.291108Z"}], "thread_id": "Thread-4", "execution_time": 0.013113975524902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_conversions_by_customer_id_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.299737Z", "completed_at": "2023-11-27T16:55:34.301799Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.307094Z", "completed_at": "2023-11-27T16:55:34.307105Z"}], "thread_id": "Thread-2", "execution_time": 0.012883901596069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_events", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.302681Z", "completed_at": "2023-11-27T16:55:34.304673Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.307931Z", "completed_at": "2023-11-27T16:55:34.307941Z"}], "thread_id": "Thread-4", "execution_time": 0.013121366500854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.316724Z", "completed_at": "2023-11-27T16:55:34.319707Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.324948Z", "completed_at": "2023-11-27T16:55:34.324957Z"}], "thread_id": "Thread-2", "execution_time": 0.013949155807495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_with_channels_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.320579Z", "completed_at": "2023-11-27T16:55:34.322519Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.325913Z", "completed_at": "2023-11-27T16:55:34.325921Z"}], "thread_id": "Thread-4", "execution_time": 0.014153242111206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_conversion_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.334906Z", "completed_at": "2023-11-27T16:55:34.336999Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.342191Z", "completed_at": "2023-11-27T16:55:34.342202Z"}], "thread_id": "Thread-2", "execution_time": 0.012827873229980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_non_conversion_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.337860Z", "completed_at": "2023-11-27T16:55:34.339810Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.343070Z", "completed_at": "2023-11-27T16:55:34.343080Z"}], "thread_id": "Thread-4", "execution_time": 0.013077259063720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_report_table_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.352173Z", "completed_at": "2023-11-27T16:55:34.354215Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.366529Z", "completed_at": "2023-11-27T16:55:34.366538Z"}], "thread_id": "Thread-2", "execution_time": 0.019396543502807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_fractribution_integration_tests.snowplow_fractribution_sessions_by_customer_id_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.355422Z", "completed_at": "2023-11-27T16:55:34.400463Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.407204Z", "completed_at": "2023-11-27T16:55:34.407214Z"}], "thread_id": "Thread-4", "execution_time": 0.06420660018920898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.test_path_transformations_actual", "compiled": true, "compiled_code": "with raw_data as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_data\n\n  )\n\n  , arrays as (\n    select\n      transformed_path as raw_array,\n      \n\n  gh_sp_fract_dbt_1.trim_long_path(transformed_path, 1)\n\n as trim_long_path,\n      \n\n  gh_sp_fract_dbt_1.trim_long_path(transformed_path, 2)\n\n as trim_long_path2,\n      \n\n    gh_sp_fract_dbt_1.unique_path(\n\n      transformed_path\n\n    \n    )\n\n as unique_path,\n      \n\n    gh_sp_fract_dbt_1.frequency_path(\n\n      transformed_path\n\n    \n    )\n\n as frequency_path,\n      \n\n    gh_sp_fract_dbt_1.exposure_path(\n\n      transformed_path\n\n    \n    )\n\n as exposure_path,\n      \n\n    gh_sp_fract_dbt_1.first_path(\n\n      transformed_path\n\n    \n    )\n\n as first_path,\n      \n\n    gh_sp_fract_dbt_1.remove_if_not_all(\n\n      transformed_path\n\n    , 'Direct' \n    )\n\n as remove_if_not_all,\n      \n\n    gh_sp_fract_dbt_1.remove_if_last_and_not_all(\n\n      transformed_path\n\n    , 'Direct' \n    )\n\n as remove_if_last_and_not_all\n\n  from raw_data d\n  )\n\n  \n\n  select\n    \n    array_to_string(a.raw_array,' > ')\n as raw_array,\n    \n    array_to_string(a.trim_long_path,' > ')\n as trim_long_path,\n    \n    array_to_string(a.trim_long_path2,' > ')\n as trim_long_path2,\n    \n    array_to_string(a.unique_path,' > ')\n as unique_path,\n    \n    array_to_string(a.frequency_path,' > ')\n as frequency_path,\n    \n    array_to_string(a.exposure_path,' > ')\n as exposure_path,\n    \n    array_to_string(a.first_path,' > ')\n as first_path,\n    \n    array_to_string(a.remove_if_not_all,' > ')\n as remove_if_not_all,\n    \n    array_to_string(a.remove_if_last_and_not_all,' > ')\n as remove_if_last_and_not_all\n\n  from arrays a\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.445723Z", "completed_at": "2023-11-27T16:55:34.460300Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.462160Z", "completed_at": "2023-11-27T16:55:34.462172Z"}], "thread_id": "Thread-4", "execution_time": 0.032486677169799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_quarantined_sessions_session_id.862c7621b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_quarantined_sessions\nwhere session_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.467167Z", "completed_at": "2023-11-27T16:55:34.475042Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:34.476588Z", "completed_at": "2023-11-27T16:55:34.476595Z"}], "thread_id": "Thread-4", "execution_time": 0.012269258499145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_base_quarantined_sessions_session_id.eef9115def", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_quarantined_sessions\nwhere session_id is not null\ngroup by session_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.481065Z", "completed_at": "2023-11-27T16:55:35.204254Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.210495Z", "completed_at": "2023-11-27T16:55:35.210512Z"}], "thread_id": "Thread-4", "execution_time": 0.9377624988555908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_base_new_event_limits", "compiled": true, "compiled_code": "\n      select\n        \n\n    dateadd(\n        hour,\n        -6,\n        \n    cast('2022-08-01 06:37:27' as timestamp)\n  \n        )\n\n as lower_limit,\n        least(\n\n    dateadd(\n        day,\n        60,\n        \n    cast('2022-08-01 06:37:27' as timestamp)\n  \n        )\n\n,\n              \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n) as upper_limit\n    ", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_new_event_limits"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.420715Z", "completed_at": "2023-11-27T16:55:35.436491Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.438027Z", "completed_at": "2023-11-27T16:55:35.438036Z"}], "thread_id": "Thread-4", "execution_time": 0.020104169845581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_web.snowplow_web-on-run-start-0", "compiled": true, "compiled_code": "\n\n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.442640Z", "completed_at": "2023-11-27T16:55:35.451154Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.452715Z", "completed_at": "2023-11-27T16:55:35.452722Z"}], "thread_id": "Thread-4", "execution_time": 0.012862443923950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_incremental_manifest_model.1abc13aaeb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_incremental_manifest\nwhere model is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.457145Z", "completed_at": "2023-11-27T16:55:35.462282Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.463870Z", "completed_at": "2023-11-27T16:55:35.463877Z"}], "thread_id": "Thread-4", "execution_time": 0.009418249130249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_incremental_manifest_model.225591dff7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    model as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_incremental_manifest\nwhere model is not null\ngroup by model\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.468415Z", "completed_at": "2023-11-27T16:55:35.472451Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.473998Z", "completed_at": "2023-11-27T16:55:35.474005Z"}], "thread_id": "Thread-4", "execution_time": 0.00848531723022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_attribution_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_expected\nwhere attribution_type = 'NULL'", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.478508Z", "completed_at": "2023-11-27T16:55:35.482328Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.483982Z", "completed_at": "2023-11-27T16:55:35.483989Z"}], "thread_id": "Thread-4", "execution_time": 0.008243322372436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_counts_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.488402Z", "completed_at": "2023-11-27T16:55:35.492323Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.493908Z", "completed_at": "2023-11-27T16:55:35.493915Z"}], "thread_id": "Thread-4", "execution_time": 0.00827932357788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_spend_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.006407Z", "completed_at": "2023-11-27T16:55:35.311485Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.313081Z", "completed_at": "2023-11-27T16:55:35.313090Z"}], "thread_id": "Thread-1", "execution_time": 1.507448673248291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_sessions_by_customer_id", "compiled": true, "compiled_code": "\n\n -- restrict to certain hostnames\n\n\nwith base_data as (\nselect\n  case when page_views.user_id is not null and page_views.user_id != '' then 'u' || page_views.user_id -- use event user_id\n  \n        else 'f' || page_views.domain_userid\n  end as customer_id, -- f (anonymous) or u (identifier) prefixed user identifier\n  derived_tstamp as visit_start_tstamp, -- we consider the event timestamp to be the session start, rather than the session start timestamp\n  \n\n    case when lower(mkt_medium) in ('cpc', 'ppc') and regexp_count(lower(mkt_campaign), 'brand') > 0 then 'Paid_Search_Brand'\n         when lower(mkt_medium) in ('cpc', 'ppc') and regexp_count(lower(mkt_campaign), 'generic') > 0 then 'Paid_Search_Generic'\n         when lower(mkt_medium) in ('cpc', 'ppc') and not regexp_count(lower(mkt_campaign), 'brand|generic') > 0 then 'Paid_Search_Other'\n         when lower(mkt_medium) = 'organic' then 'Organic_Search'\n         when lower(mkt_medium) in ('display', 'cpm', 'banner') and regexp_count(lower(mkt_campaign), 'prospect') > 0 then 'Display_Prospecting'\n         when lower(mkt_medium) in ('display', 'cpm', 'banner') and regexp_count(lower(mkt_campaign), 'retargeting|re-targeting|remarketing|re-marketing') > 0 then 'Display_Retargeting'\n         when lower(mkt_medium) in ('display', 'cpm', 'banner') and not regexp_count(lower(mkt_campaign), 'prospect|retargeting|re-targeting|remarketing|re-marketing') > 0 then 'Display_Other'\n         when regexp_count(lower(mkt_campaign), 'video|youtube') > 0 or regexp_count(lower(mkt_source), 'video|youtube') > 0 then 'Video'\n         when lower(mkt_medium) = 'social' and regexp_count(lower(mkt_campaign), 'prospect') > 0 then 'Paid_Social_Prospecting'\n         when lower(mkt_medium) = 'social' and regexp_count(lower(mkt_campaign), 'retargeting|re-targeting|remarketing|re-marketing') > 0 then 'Paid_Social_Retargeting'\n         when lower(mkt_medium) = 'social' and not regexp_count(lower(mkt_campaign), 'prospect|retargeting|re-targeting|remarketing|re-marketing') > 0 then 'Paid_Social_Other'\n         when mkt_source = '(direct)' then 'Direct'\n         when lower(mkt_medium) = 'referral' then 'Referral'\n         when lower(mkt_medium) = 'email' then 'Email'\n         when lower(mkt_medium) in ('cpc', 'ppc', 'cpv', 'cpa', 'affiliates') then 'Other_Advertising'\n         else 'Unmatched_Channel'\n    end\n\n as channel,\n  refr_urlpath as referral_path,\n  mkt_campaign as campaign,\n  mkt_source as source,\n  mkt_medium as medium\n\nfrom gh_sp_fract_dbt_1_derived.snowplow_web_page_views  page_views\n\n\n\nwhere date(derived_tstamp) >= '2022-05-04'\n\n  and date(derived_tstamp) <= '2022-08-01'\n\n  and\n    -- restrict to certain hostnames\n\npage_urlhost in ( 'poplindata.com' )\n\n\n  -- yields one row per session (last touch)\n  and page_view_in_session_index = 1 -- takes the first page view in the session\n\n)\n\nselect\n  *\nfrom\n  base_data\n\n    -- Filters out any unwanted channels\n    where channel not in ( 'fake_channel' )\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.498429Z", "completed_at": "2023-11-27T16:55:35.504351Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.507466Z", "completed_at": "2023-11-27T16:55:35.507473Z"}], "thread_id": "Thread-4", "execution_time": 0.012694120407104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_conversions_by_customer_id_expected_stg", "compiled": true, "compiled_code": "select\n  customer_id,\n  cast(conversion_tstamp as timestamp) as conversion_tstamp,\n  revenue\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.519123Z", "completed_at": "2023-11-27T16:55:35.523024Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.526198Z", "completed_at": "2023-11-27T16:55:35.526207Z"}], "thread_id": "Thread-4", "execution_time": 0.014883756637573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.514292Z", "completed_at": "2023-11-27T16:55:35.523868Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.527101Z", "completed_at": "2023-11-27T16:55:35.527108Z"}], "thread_id": "Thread-1", "execution_time": 0.018864154815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_events_stg", "compiled": true, "compiled_code": "-- page view context is given as json string in csv. Parse json\nwith prep as (\n\nselect\n  *,\n  parse_json(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) as contexts_com_snowplowanalytics_snowplow_web_page_1\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_events\n)\n\n\nselect\n  *\n\nfrom prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_events_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.535714Z", "completed_at": "2023-11-27T16:55:35.544041Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.545801Z", "completed_at": "2023-11-27T16:55:35.545809Z"}], "thread_id": "Thread-4", "execution_time": 0.014772653579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_with_channels_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_expected\nwhere attribution_type = 'NULL'", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.539750Z", "completed_at": "2023-11-27T16:55:35.550685Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.557077Z", "completed_at": "2023-11-27T16:55:35.557086Z"}], "thread_id": "Thread-1", "execution_time": 0.025007247924804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_conversion_expected_stg", "compiled": true, "compiled_code": "select\n  customer_id,\n  cast(conversion_tstamp as timestamp) as conversion_tstamp,\n  revenue,\n  path,\n  transformed_path\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.551515Z", "completed_at": "2023-11-27T16:55:35.562037Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.568302Z", "completed_at": "2023-11-27T16:55:35.568314Z"}], "thread_id": "Thread-4", "execution_time": 0.020766735076904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_non_conversion_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.379998Z", "completed_at": "2023-11-27T16:55:35.349224Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.350805Z", "completed_at": "2023-11-27T16:55:35.350815Z"}], "thread_id": "Thread-2", "execution_time": 1.201650857925415, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equality_test_time_limits_actual_ref_test_time_limits_expected_.3b1b7fda1b", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_time_limits_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_time_limits_expected\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.562894Z", "completed_at": "2023-11-27T16:55:35.572301Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.577617Z", "completed_at": "2023-11-27T16:55:35.577625Z"}], "thread_id": "Thread-1", "execution_time": 0.020232677459716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_report_table_expected_stg", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_expected\nwhere attribution_type = 'NULL'", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.581287Z", "completed_at": "2023-11-27T16:55:35.599226Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.617566Z", "completed_at": "2023-11-27T16:55:35.617578Z"}], "thread_id": "Thread-4", "execution_time": 0.04820966720581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_sessions_by_customer_id_expected_stg", "compiled": true, "compiled_code": "select\n  customer_id,\n  cast(visit_start_tstamp as timestamp)  as visit_start_tstamp,\n  channel,\n  referral_path,\n  campaign,\n  source,\n  medium\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.606102Z", "completed_at": "2023-11-27T16:55:35.640723Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.643940Z", "completed_at": "2023-11-27T16:55:35.643949Z"}], "thread_id": "Thread-1", "execution_time": 0.04754519462585449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_channel_attribution_actual_ref_snowplow_fractribution_channel_attribution_expected_stg_.8e3a494b3f", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.650815Z", "completed_at": "2023-11-27T16:55:35.655767Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.657297Z", "completed_at": "2023-11-27T16:55:35.657304Z"}], "thread_id": "Thread-1", "execution_time": 0.009604454040527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_channel_counts", "compiled": true, "compiled_code": "\n\nselect\n  channel,\n  campaign,\n  source,\n  medium,\n  count(*) as number_of_sessions\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id\n\ngroup by 1,2,3,4\n\norder by channel, number_of_sessions desc", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_counts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.661957Z", "completed_at": "2023-11-27T16:55:35.665876Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:35.668418Z", "completed_at": "2023-11-27T16:55:35.668425Z"}], "thread_id": "Thread-1", "execution_time": 0.009310722351074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_sessions_by_customer_id_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:34.236487Z", "completed_at": "2023-11-27T16:55:36.133739Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.135342Z", "completed_at": "2023-11-27T16:55:36.135355Z"}], "thread_id": "Thread-3", "execution_time": 2.121432304382324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_fractribution.snowplow_fractribution-on-run-start-0", "compiled": true, "compiled_code": "\n\n  \n\n\n  -- Functions for applying transformations to path arrays.\n  -- unique_path: Identity transform.\n  --   E.g. [D, A, B, B, C, D, C, C] --> [D, A, B, B, C, D, C, C].\n  -- exposure_path: Collapse sequential repeats.\n  --   E.g. [D, A, B, B, C, D, C, C] --> [D, A, B, C, D, C].\n  -- first_path: Removes repeated events.\n  --   E.g. [D, A, B, B, C, D, C, C] --> [D, A, B, C].\n  -- frequency_path: Removes repeat events but tracks them with a count.\n  --   E.g. [D, A, B, B, C, D, C, C] --> [D(2), A(1), B(2), C(3)).\n  -- remove_if_last_and_not_all: requires a channel to be added as a parameter, which gets removed from the latest paths unless it removes the whole path as it is trying to reach a non-matching channel parameter\n  --   E.g target element: `A`, path: `A \u2192 B \u2192 A \u2192 A` becomes `A \u2192 B`\n  -- remove_if_not_all: requires a channel to be added as a parameter, which gets removed from the path altogether unless it would result in the whole path's removal.\n  --   E.g target element: `A`, path: `A \u2192 B \u2192 A \u2192 A` becomes `B`\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n  \n\n  -- create the udfs (as permanent UDFs)\n   -- run this FIRST before the rest get run\n  \n  \n  \n  \n  \n  \n  \n  -- have to return some valid sql\n  select 1;\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.585724Z", "completed_at": "2023-11-27T16:55:36.670271Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.671878Z", "completed_at": "2023-11-27T16:55:36.671890Z"}], "thread_id": "Thread-2", "execution_time": 1.307574987411499, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equality_test_path_transformations_actual_ref_test_path_transformations_expected_.1b0b5250d8", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.test_path_transformations_expected\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:36.887857Z", "completed_at": "2023-11-27T16:55:36.895676Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.897235Z", "completed_at": "2023-11-27T16:55:36.897242Z"}], "thread_id": "Thread-2", "execution_time": 0.012197017669677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_path_summary_with_channels_actual_ref_snowplow_fractribution_path_summary_with_channels_expected_stg_.166f2bd11b", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.629435Z", "completed_at": "2023-11-27T16:55:36.719461Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.721051Z", "completed_at": "2023-11-27T16:55:36.721059Z"}], "thread_id": "Thread-4", "execution_time": 1.3046987056732178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_channel_attribution_actual_ref_snowplow_fractribution_channel_attribution_expected_stg___ATTRIBUTION_TYPE__4.b272b3a8fa", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n        \n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_attribution_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:36.935979Z", "completed_at": "2023-11-27T16:55:36.942264Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.943849Z", "completed_at": "2023-11-27T16:55:36.943856Z"}], "thread_id": "Thread-4", "execution_time": 0.010681867599487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_report_table_actual_ref_snowplow_fractribution_report_table_expected_stg_.109f74732a", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:35.673098Z", "completed_at": "2023-11-27T16:55:36.825943Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:36.827547Z", "completed_at": "2023-11-27T16:55:36.827557Z"}], "thread_id": "Thread-1", "execution_time": 1.355480432510376, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_conversions_by_customer_id", "compiled": true, "compiled_code": "\n\nselect\n  case when events.user_id is not null and events.user_id != '' then 'u' || events.user_id -- use event user_id\n    \n       else 'f' || events.domain_userid\n  end as customer_id,\n  derived_tstamp as conversion_tstamp,\n  \n    tr_total\n as revenue\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_events_stg as events\n\n\n\nwhere \n    tr_total > 0\n\n  and date(derived_tstamp) >= '2022-06-03'\n  and date(derived_tstamp) <= '2022-08-01'\n\n  ", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_conversions_by_customer_id"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.030544Z", "completed_at": "2023-11-27T16:55:37.041221Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.042783Z", "completed_at": "2023-11-27T16:55:37.042792Z"}], "thread_id": "Thread-1", "execution_time": 0.015158891677856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_channel_spend", "compiled": true, "compiled_code": "\n\n-- By default, the model assigns an example 10k spend to each channel found in channel_counts\n-- TODO: put in your own spend calculations per channel in the channel_spend macro in your own dbt project\n\n\n\n\n  with channels as (\n\n      select\n        1 as id,\n        array_agg(distinct cast(channel as \n    TEXT\n)) as c\n\n      from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_counts\n  )\n\n  , unnesting as (\n\n      \n    select t.id, replace(r.value, '\"', '') as channel\n    from channels t, table(flatten(t.c)) r\n\n  )\n\n  select\n    channel,\n    10000 as spend\n\n  from unnesting\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_spend"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.047396Z", "completed_at": "2023-11-27T16:55:37.051310Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.053001Z", "completed_at": "2023-11-27T16:55:37.053011Z"}], "thread_id": "Thread-1", "execution_time": 0.008623361587524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_counts_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_counts", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.058305Z", "completed_at": "2023-11-27T16:55:37.064555Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.066096Z", "completed_at": "2023-11-27T16:55:37.066102Z"}], "thread_id": "Thread-1", "execution_time": 0.011166810989379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_sessions_by_customer_id_actual_ref_snowplow_fractribution_sessions_by_customer_id_expected_stg_.62a315f146", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:36.349942Z", "completed_at": "2023-11-27T16:55:37.525764Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.527445Z", "completed_at": "2023-11-27T16:55:37.527458Z"}], "thread_id": "Thread-3", "execution_time": 1.3980398178100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_base_sessions_lifecycle_manifest", "compiled": true, "compiled_code": "\n\n-- Known edge cases:\n-- 1: Rare case with multiple domain_userid per session.\n\n\n\n\n\nwith new_events_session_ids as (\n  select\n    e.domain_sessionid as session_id,\n    max(e.domain_userid) as domain_userid, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n    min(e.collector_tstamp) as start_tstamp,\n    max(e.collector_tstamp) as end_tstamp\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_events_stg e\n\n  where\n    e.domain_sessionid is not null\n    and not exists (select 1 from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_quarantined_sessions as a where a.session_id = e.domain_sessionid) -- don't continue processing v.long sessions\n    and e.dvce_sent_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        dvce_created_tstamp\n        )\n\n -- don't process data that's too late\n    and e.collector_tstamp >= \n    cast('2022-06-03 00:00:00' as timestamp)\n  \n    and e.collector_tstamp <= \n    cast('2022-08-02 00:00:00' as timestamp)\n  \n    and true\n    and cast(True as boolean) --don't reprocess sessions that have already been processed.\n    \n\n  group by 1\n  )\n\n\n\n, previous_sessions as (\n  select *\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\n\n  where start_tstamp >= \n    cast('2020-06-03 00:00:00' as timestamp)\n  \n  and cast(True as boolean) --don't reprocess sessions that have already been processed.\n)\n\n, session_lifecycle as (\n  select\n    ns.session_id,\n    coalesce(self.domain_userid, ns.domain_userid) as domain_userid, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n    least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n    greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n\n  from new_events_session_ids ns\n  left join previous_sessions as self\n    on ns.session_id = self.session_id\n\n  where\n    self.session_id is null -- process all new sessions\n    or self.end_tstamp < \n\n    dateadd(\n        day,\n        3,\n        self.start_tstamp\n        )\n\n --stop updating sessions exceeding 3 days\n  )\n\n\n\nselect\n  sl.session_id,\n  sl.domain_userid,\n  sl.start_tstamp,\n  least(\n\n    dateadd(\n        day,\n        3,\n        sl.start_tstamp\n        )\n\n, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n  \n\nfrom session_lifecycle sl", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.750167Z", "completed_at": "2023-11-27T16:55:37.775967Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.777531Z", "completed_at": "2023-11-27T16:55:37.777539Z"}], "thread_id": "Thread-3", "execution_time": 0.03049612045288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_paths_to_conversion", "compiled": true, "compiled_code": "\n\n-- Requires macro trim_long_path\n\nwith string_aggs as (\n\n  select\n    c.customer_id,\n    c.conversion_tstamp,\n    c.revenue,\n    \n\n  \n\n\n  listagg( s.channel::varchar, ' > ') within group (order by\n\n  \n    s.visit_start_tstamp::varchar )\n\n as path\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_conversions_by_customer_id c\n\n  inner join SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id s\n  on c.customer_id = s.customer_id\n    and datediff(\n        day,\n        s.visit_start_tstamp,\n        c.conversion_tstamp\n        )  >= 0\n    and datediff(\n        day,\n        s.visit_start_tstamp,\n        c.conversion_tstamp\n        ) <= 30\n\n  group by 1,2,3\n\n)\n\n \n\n, arrays as (\n\n  select\n    customer_id,\n    conversion_tstamp,\n    revenue,\n    \n   split(s.path, ' > ')\n as path,\n    \n   split(s.path, ' > ')\n as transformed_path\n\n\n  from string_aggs s\n\n)\n\n\n\n  \n\n  , path_transforms as (\n\n     select\n        customer_id,\n        \n        conversion_tstamp,\n        revenue,\n        \n        \n\n  gh_sp_fract_dbt_1.trim_long_path(path, 0)\n\n as path,\n\n    \n\n      -- reverse transormation due to nested functions, items to be processed from left to right\n      \n        \n        gh_sp_fract_dbt_1.exposure_path(\n      \n\n      transformed_path\n      -- no reverse needed due to nested nature of function calls\n      \n        \n        )\n      \n\n      as transformed_path\n\n    \n\n  from arrays\n\n  )\n\n\n\nselect\n  customer_id,\n  conversion_tstamp,\n  revenue,\n  \n    array_to_string(p.path,' > ')\n as path,\n  \n    array_to_string(p.transformed_path,' > ')\n as transformed_path\n\nfrom path_transforms p\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_conversion"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.782075Z", "completed_at": "2023-11-27T16:55:37.792979Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.796435Z", "completed_at": "2023-11-27T16:55:37.796446Z"}], "thread_id": "Thread-3", "execution_time": 0.018119335174560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_paths_to_non_conversion", "compiled": true, "compiled_code": "\n\n-- Requires macro trim_long_path\n\n\nwith non_conversions as (\n\n  select\n    customer_id,\n    max(visit_start_tstamp) as non_conversion_tstamp\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id s\n\n  where not exists (select customer_id from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_conversions_by_customer_id c where s.customer_id = c.customer_id)\n\n  group by 1\n\n)\n\n, string_aggs as (\n\n  select\n    n.customer_id,\n    \n\n  \n\n\n  listagg( s.channel::varchar, ' > ') within group (order by\n\n  \n    s.visit_start_tstamp::varchar )\n\n as path\n\n  from non_conversions n\n\n  inner join SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_sessions_by_customer_id s\n  on n.customer_id = s.customer_id\n    and datediff(\n        day,\n        s.visit_start_tstamp,\n        n.non_conversion_tstamp\n        )  >= 0\n    and datediff(\n        day,\n        s.visit_start_tstamp,\n        n.non_conversion_tstamp\n        ) <= 30\n\n  group by 1\n\n\n)\n\n\n\n, arrays as (\n\n    select\n      customer_id,\n      \n   split(s.path, ' > ')\n as path,\n      \n   split(s.path, ' > ')\n as transformed_path\n\n    from string_aggs s\n\n)\n\n\n\n  \n\n  , path_transforms as (\n\n     select\n        customer_id,\n        \n        \n\n  gh_sp_fract_dbt_1.trim_long_path(path, 0)\n\n as path,\n\n    \n\n      -- reverse transormation due to nested functions, items to be processed from left to right\n      \n        \n        gh_sp_fract_dbt_1.exposure_path(\n      \n\n      transformed_path\n      -- no reverse needed due to nested nature of function calls\n      \n        \n        )\n      \n\n      as transformed_path\n\n    \n\n  from arrays\n\n  )\n\n\n\nselect\n  customer_id,\n  \n    array_to_string(p.path,' > ')\n as path,\n  \n    array_to_string(p.transformed_path,' > ')\n as transformed_path\n\nfrom path_transforms p\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_non_conversion"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.812933Z", "completed_at": "2023-11-27T16:55:37.824805Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.829494Z", "completed_at": "2023-11-27T16:55:37.829506Z"}], "thread_id": "Thread-3", "execution_time": 0.025881052017211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_conversions_by_customer_id_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_conversions_by_customer_id", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.841358Z", "completed_at": "2023-11-27T16:55:37.845587Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.847189Z", "completed_at": "2023-11-27T16:55:37.847196Z"}], "thread_id": "Thread-3", "execution_time": 0.010028600692749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_channel_spend_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_spend", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.851837Z", "completed_at": "2023-11-27T16:55:37.858612Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.860166Z", "completed_at": "2023-11-27T16:55:37.860173Z"}], "thread_id": "Thread-3", "execution_time": 0.011167049407958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_channel_counts_actual_ref_snowplow_fractribution_channel_counts_expected_stg_.0ef3593d07", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:36.901838Z", "completed_at": "2023-11-27T16:55:37.968394Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.970142Z", "completed_at": "2023-11-27T16:55:37.970155Z"}], "thread_id": "Thread-2", "execution_time": 1.28367280960083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_path_summary_with_channels_actual_ref_snowplow_fractribution_path_summary_with_channels_expected_stg___ATTRIBUTION_TYPE__4.b7f93961ea", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n        \n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_with_channels_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.070720Z", "completed_at": "2023-11-27T16:55:37.993237Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.996087Z", "completed_at": "2023-11-27T16:55:37.996094Z"}], "thread_id": "Thread-1", "execution_time": 1.141174077987671, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_sessions_by_customer_id_actual_ref_snowplow_fractribution_sessions_by_customer_id_expected_stg___4.4edd1680b4", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_sessions_by_customer_id_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:36.948398Z", "completed_at": "2023-11-27T16:55:37.986086Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:37.990110Z", "completed_at": "2023-11-27T16:55:37.990119Z"}], "thread_id": "Thread-4", "execution_time": 1.2649931907653809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_report_table_actual_ref_snowplow_fractribution_report_table_expected_stg___ATTRIBUTION_TYPE__4.6c83f5f46a", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n        \n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_report_table_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.218065Z", "completed_at": "2023-11-27T16:55:38.229976Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.232437Z", "completed_at": "2023-11-27T16:55:38.232446Z"}], "thread_id": "Thread-1", "execution_time": 0.019710063934326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_end_tstamp.de91d8a021", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere end_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.224470Z", "completed_at": "2023-11-27T16:55:38.231623Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.235233Z", "completed_at": "2023-11-27T16:55:38.235240Z"}], "thread_id": "Thread-4", "execution_time": 0.021539688110351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_session_id.319366317f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere session_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.241681Z", "completed_at": "2023-11-27T16:55:38.253136Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.256500Z", "completed_at": "2023-11-27T16:55:38.256508Z"}], "thread_id": "Thread-1", "execution_time": 0.020305156707763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_lifecycle_manifest_start_tstamp.19f9724e3e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere start_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.248089Z", "completed_at": "2023-11-27T16:55:38.254140Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.257321Z", "completed_at": "2023-11-27T16:55:38.257328Z"}], "thread_id": "Thread-4", "execution_time": 0.018962621688842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_base_sessions_lifecycle_manifest_session_id.98156c1d39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest\nwhere session_id is not null\ngroup by session_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.265767Z", "completed_at": "2023-11-27T16:55:38.275456Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.277896Z", "completed_at": "2023-11-27T16:55:38.277904Z"}], "thread_id": "Thread-1", "execution_time": 0.017503738403320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_conversion_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_conversion", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.269513Z", "completed_at": "2023-11-27T16:55:38.277083Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.280726Z", "completed_at": "2023-11-27T16:55:38.280733Z"}], "thread_id": "Thread-4", "execution_time": 0.019600391387939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_path_summary", "compiled": true, "compiled_code": "\n\nwith paths_to_conversion as (\n\n  select\n    transformed_path,\n    count(*) as conversions,\n    sum(revenue) as revenue\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_conversion\n\n  group by 1\n\n)\n\n, paths_to_non_conversion as (\n\n  select\n    transformed_path,\n    count(*) as non_conversions\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_non_conversion\n\n  group by 1\n)\n\nselect\n  coalesce(c.transformed_path, n.transformed_path) as transformed_path,\n  coalesce(c.conversions, 0) as conversions,\n  coalesce(n.non_conversions, 0) as non_conversions,\n  c.revenue\n\nfrom paths_to_conversion c\n\nfull join paths_to_non_conversion n\n  on c.transformed_path = n.transformed_path", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_path_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.288331Z", "completed_at": "2023-11-27T16:55:38.303565Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.305302Z", "completed_at": "2023-11-27T16:55:38.305310Z"}], "thread_id": "Thread-1", "execution_time": 0.023863792419433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_paths_to_non_conversion_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_paths_to_non_conversion", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.293753Z", "completed_at": "2023-11-27T16:55:38.306139Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.310808Z", "completed_at": "2023-11-27T16:55:38.310815Z"}], "thread_id": "Thread-4", "execution_time": 0.025697708129882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_conversions_by_customer_id_actual_ref_snowplow_fractribution_conversions_by_customer_id_expected_stg_.34128e2be3", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.327878Z", "completed_at": "2023-11-27T16:55:38.336982Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.338584Z", "completed_at": "2023-11-27T16:55:38.338593Z"}], "thread_id": "Thread-4", "execution_time": 0.015309810638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_channel_spend_actual_ref_snowplow_fractribution_channel_spend_expected_stg_.4d05f358f3", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:37.864656Z", "completed_at": "2023-11-27T16:55:38.801180Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.802794Z", "completed_at": "2023-11-27T16:55:38.802807Z"}], "thread_id": "Thread-3", "execution_time": 1.1408271789550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_channel_counts_actual_ref_snowplow_fractribution_channel_counts_expected_stg___4.34966e5b2e", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_counts_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.007419Z", "completed_at": "2023-11-27T16:55:39.014782Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:39.016350Z", "completed_at": "2023-11-27T16:55:39.016358Z"}], "thread_id": "Thread-3", "execution_time": 0.011746406555175781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_paths_to_conversion_actual_ref_snowplow_fractribution_paths_to_conversion_expected_stg_.3a15a18b2f", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.187582Z", "completed_at": "2023-11-27T16:55:38.819853Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:38.821408Z", "completed_at": "2023-11-27T16:55:38.821415Z"}], "thread_id": "Thread-2", "execution_time": 0.9240381717681885, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_base_sessions_this_run", "compiled": true, "compiled_code": "\n\nselect\n  s.session_id,\n  s.domain_userid,\n  s.start_tstamp,\n  -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit.\n  -- This ensures we don't accidentally process events after upper_limit\n  case when s.end_tstamp > \n    cast('2022-08-02 00:00:00' as timestamp)\n   then \n    cast('2022-08-02 00:00:00' as timestamp)\n   else s.end_tstamp end as end_tstamp\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snowplow_manifest.snowplow_web_base_sessions_lifecycle_manifest s\n\nwhere\n-- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n-- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\ns.start_tstamp >= \n    cast('2022-05-31 00:00:00' as timestamp)\n  \nand s.start_tstamp <= \n    cast('2022-08-02 00:00:00' as timestamp)\n  \n-- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\nand not (s.start_tstamp > \n    cast('2022-08-02 00:00:00' as timestamp)\n   or s.end_tstamp < \n    cast('2022-06-03 00:00:00' as timestamp)\n  )", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_sessions_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.315551Z", "completed_at": "2023-11-27T16:55:39.276923Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:39.278505Z", "completed_at": "2023-11-27T16:55:39.278517Z"}], "thread_id": "Thread-1", "execution_time": 1.1711740493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_conversions_by_customer_id_actual_ref_snowplow_fractribution_conversions_by_customer_id_expected_stg___4.16a2d20644", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_conversions_by_customer_id_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.486923Z", "completed_at": "2023-11-27T16:55:39.491284Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:39.492830Z", "completed_at": "2023-11-27T16:55:39.492838Z"}], "thread_id": "Thread-1", "execution_time": 0.008878707885742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution_integration_tests.snowplow_fractribution_path_summary_actual", "compiled": true, "compiled_code": "select *\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_path_summary", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.497498Z", "completed_at": "2023-11-27T16:55:39.503820Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:39.505362Z", "completed_at": "2023-11-27T16:55:39.505369Z"}], "thread_id": "Thread-1", "execution_time": 0.010708093643188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_paths_to_non_conversion_actual_ref_snowplow_fractribution_paths_to_non_conversion_expected_stg_.bb742fed23", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:38.345128Z", "completed_at": "2023-11-27T16:55:39.296663Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:39.298197Z", "completed_at": "2023-11-27T16:55:39.298203Z"}], "thread_id": "Thread-4", "execution_time": 1.182312250137329, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_channel_spend_actual_ref_snowplow_fractribution_channel_spend_expected_stg___4.01332dff69", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_channel_spend_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.020855Z", "completed_at": "2023-11-27T16:55:40.017151Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.018764Z", "completed_at": "2023-11-27T16:55:40.018777Z"}], "thread_id": "Thread-3", "execution_time": 1.2098100185394287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_paths_to_conversion_actual_ref_snowplow_fractribution_paths_to_conversion_expected_stg___4.0a55c6fea1", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_conversion_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.232623Z", "completed_at": "2023-11-27T16:55:40.238199Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.239778Z", "completed_at": "2023-11-27T16:55:40.239786Z"}], "thread_id": "Thread-3", "execution_time": 0.009878158569335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_sessions_this_run_session_id.56273da92b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_sessions_this_run\nwhere session_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.244232Z", "completed_at": "2023-11-27T16:55:40.249306Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.250863Z", "completed_at": "2023-11-27T16:55:40.250870Z"}], "thread_id": "Thread-3", "execution_time": 0.00930166244506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_base_sessions_this_run_session_id.daa62a6c5c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_sessions_this_run\nwhere session_id is not null\ngroup by session_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.255394Z", "completed_at": "2023-11-27T16:55:40.261311Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.262876Z", "completed_at": "2023-11-27T16:55:40.262883Z"}], "thread_id": "Thread-3", "execution_time": 0.010293960571289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.dbt_utils_equal_rowcount_snowplow_fractribution_path_summary_actual_ref_snowplow_fractribution_path_summary_expected_stg_.ceb36baccb", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.528476Z", "completed_at": "2023-11-27T16:55:40.179539Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.181148Z", "completed_at": "2023-11-27T16:55:40.181158Z"}], "thread_id": "Thread-4", "execution_time": 0.8642892837524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_base_events_this_run", "compiled": true, "compiled_code": "\n\nselect\n  a.contexts_com_snowplowanalytics_snowplow_web_page_1[0]:id::varchar as page_view_id,\n  b.domain_userid, -- take domain_userid from manifest. This ensures only 1 domain_userid per session.\n  a.* exclude(contexts_com_snowplowanalytics_snowplow_web_page_1, domain_userid)\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_events_stg as a\ninner join SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_sessions_this_run as b\non a.domain_sessionid = b.session_id\n\nwhere a.collector_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        b.start_tstamp\n        )\n\n\nand a.dvce_sent_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        a.dvce_created_tstamp\n        )\n\n\nand a.collector_tstamp >= \n    cast('2022-06-03 05:44:32' as timestamp)\n  \nand a.collector_tstamp <= \n    cast('2022-08-01 06:37:27' as timestamp)\n  \nand true\n\nqualify row_number() over (partition by a.event_id order by a.collector_tstamp) = 1", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.394754Z", "completed_at": "2023-11-27T16:55:40.403641Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.405214Z", "completed_at": "2023-11-27T16:55:40.405223Z"}], "thread_id": "Thread-4", "execution_time": 0.013182640075683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_pv_engaged_time", "compiled": true, "compiled_code": "\n\nselect\n  ev.page_view_id,\n  \n  ev.domain_sessionid,\n  \n  max(ev.derived_tstamp) as end_tstamp,\n\n  -- aggregate pings:\n    -- divides epoch tstamps by snowplow__heartbeat to get distinct intervals\n    -- floor rounds to nearest integer - duplicates all evaluate to the same number\n    -- count(distinct) counts duplicates only once\n    -- adding snowplow__min_visit_length accounts for the page view event itself.\n\n  10 * (count(distinct(floor(date_part('epoch_seconds', ev.dvce_created_tstamp)/10))) - 1) + 5 as engaged_time_in_s\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run as ev\n\nwhere ev.event_name = 'page_ping'\nand ev.page_view_id is not null\n\ngroup by 1 , 2 ", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_engaged_time"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.409821Z", "completed_at": "2023-11-27T16:55:40.421355Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.422938Z", "completed_at": "2023-11-27T16:55:40.422945Z"}], "thread_id": "Thread-4", "execution_time": 0.015914440155029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_pv_scroll_depth", "compiled": true, "compiled_code": "\n\nwith prep as (\n  select\n    ev.page_view_id,\n    \n    ev.domain_sessionid,\n    \n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n\n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run as ev\n\n  where ev.event_name in ('page_view', 'page_ping')\n    and ev.page_view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1 , 2 \n)\n\nselect\n  page_view_id,\n  \n  domain_sessionid,\n  \n\n  doc_width,\n  doc_height,\n\n  br_viewwidth,\n  br_viewheight,\n\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as float))) as float) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as float))) as float) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as float))) as float) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as float))) as float) as relative_vmax -- not zero when a user hasn't scrolled because it includes the non-zero viewheight\n\nfrom prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_scroll_depth"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.427401Z", "completed_at": "2023-11-27T16:55:40.446825Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.448394Z", "completed_at": "2023-11-27T16:55:40.448401Z"}], "thread_id": "Thread-4", "execution_time": 0.023781538009643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_web.snowplow_web-on-run-end-0", "compiled": true, "compiled_code": "\n  \n                    \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.452825Z", "completed_at": "2023-11-27T16:55:40.457856Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.459614Z", "completed_at": "2023-11-27T16:55:40.459622Z"}], "thread_id": "Thread-4", "execution_time": 0.009497642517089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_base_events_this_run_event_id.0fc80e3549", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.464214Z", "completed_at": "2023-11-27T16:55:40.469251Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.470843Z", "completed_at": "2023-11-27T16:55:40.470850Z"}], "thread_id": "Thread-4", "execution_time": 0.009505033493041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_base_events_this_run_event_id.9ad59b967e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.476124Z", "completed_at": "2023-11-27T16:55:40.486125Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.489329Z", "completed_at": "2023-11-27T16:55:40.489337Z"}], "thread_id": "Thread-4", "execution_time": 0.01761174201965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_pv_engaged_time_page_view_id.21b1a00326", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_engaged_time\nwhere page_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.496739Z", "completed_at": "2023-11-27T16:55:40.505008Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.506541Z", "completed_at": "2023-11-27T16:55:40.506571Z"}], "thread_id": "Thread-4", "execution_time": 0.01259469985961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_pv_engaged_time__page_view_id_domain_sessionid_.89dbaed8de", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (page_view_id || '-' || domain_sessionid) as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_engaged_time\nwhere (page_view_id || '-' || domain_sessionid) is not null\ngroup by (page_view_id || '-' || domain_sessionid)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.511059Z", "completed_at": "2023-11-27T16:55:40.554062Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.555688Z", "completed_at": "2023-11-27T16:55:40.555696Z"}], "thread_id": "Thread-4", "execution_time": 0.04740142822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_page_views_this_run", "compiled": true, "compiled_code": "\n\nwith prep as (\nselect\n  ev.page_view_id,\n  ev.event_id,\n\n  ev.app_id,\n\n  -- user fields\n  ev.user_id,\n  ev.domain_userid,\n  ev.network_userid,\n\n  -- session fields\n  ev.domain_sessionid,\n  ev.domain_sessionidx,\n\n  -- timestamp fields\n  ev.dvce_created_tstamp,\n  ev.collector_tstamp,\n  ev.derived_tstamp,\n  ev.derived_tstamp as start_tstamp,\n\n  ev.doc_width,\n  ev.doc_height,\n\n  ev.page_title,\n  ev.page_url,\n  ev.page_urlscheme,\n  ev.page_urlhost,\n  ev.page_urlpath,\n  ev.page_urlquery,\n  ev.page_urlfragment,\n\n  ev.mkt_medium,\n  ev.mkt_source,\n  ev.mkt_term,\n  ev.mkt_content,\n  ev.mkt_campaign,\n  ev.mkt_clickid,\n  ev.mkt_network,\n\n  ev.page_referrer,\n  ev.refr_urlscheme,\n  ev.refr_urlhost,\n  ev.refr_urlpath,\n  ev.refr_urlquery,\n  ev.refr_urlfragment,\n  ev.refr_medium,\n  ev.refr_source,\n  ev.refr_term,\n\n  ev.geo_country,\n  ev.geo_region,\n  ev.geo_region_name,\n  ev.geo_city,\n  ev.geo_zipcode,\n  ev.geo_latitude,\n  ev.geo_longitude,\n  ev.geo_timezone ,\n\n  ev.user_ipaddress,\n\n  ev.useragent,\n\n  ev.br_lang,\n  ev.br_viewwidth,\n  ev.br_viewheight,\n  ev.br_colordepth,\n  ev.br_renderengine,\n  ev.os_timezone,\n\n  -- optional fields, only populated if enabled.\n\n  -- iab enrichment fields: set iab variable to true to enable\n  cast(null as TEXT) as category,\n        cast(null as TEXT) as primary_impact,\n        cast(null as TEXT) as reason,\n        cast(null as boolean) as spider_or_robot,\n\n  -- ua parser enrichment fields\n  cast(null as TEXT) as useragent_family,\n        cast(null as TEXT) as useragent_major,\n        cast(null as TEXT) as useragent_minor,\n        cast(null as TEXT) as useragent_patch,\n        cast(null as TEXT) as useragent_version,\n        cast(null as TEXT) as os_family,\n        cast(null as TEXT) as os_major,\n        cast(null as TEXT) as os_minor,\n        cast(null as TEXT) as os_patch,\n        cast(null as TEXT) as os_patch_minor,\n        cast(null as TEXT) as os_version,\n        cast(null as TEXT) as device_family\n    \n\n,\n\n  -- yauaa enrichment fields\n  cast(null as TEXT) as device_class,\n        cast(null as TEXT) as agent_class,\n        cast(null as TEXT) as agent_name,\n        cast(null as TEXT) as agent_name_version,\n        cast(null as TEXT) as agent_name_version_major,\n        cast(null as TEXT) as agent_version,\n        cast(null as TEXT) as agent_version_major,\n        cast(null as TEXT) as device_brand,\n        cast(null as TEXT) as device_name,\n        cast(null as TEXT) as device_version,\n        cast(null as TEXT) as layout_engine_class,\n        cast(null as TEXT) as layout_engine_name,\n        cast(null as TEXT) as layout_engine_name_version,\n        cast(null as TEXT) as layout_engine_name_version_major,\n        cast(null as TEXT) as layout_engine_version,\n        cast(null as TEXT) as layout_engine_version_major,\n        cast(null as TEXT) as operating_system_class,\n        cast(null as TEXT) as operating_system_name,\n        cast(null as TEXT) as operating_system_name_version,\n        cast(null as TEXT) as operating_system_version\n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_base_events_this_run as ev\n\n  where ev.event_name = 'page_view'\n  and ev.page_view_id is not null\n\n  \n     \n  and not rlike(ev.useragent, '.*(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt).*')\n\n  \n\n  qualify row_number() over (partition by ev.page_view_id order by ev.derived_tstamp, ev.dvce_created_tstamp) = 1\n)\n\n, page_view_events as (\n  select\n    p.page_view_id,\n    p.event_id,\n\n    p.app_id,\n\n    -- user fields\n    p.user_id,\n    p.domain_userid,\n    p.network_userid,\n\n    -- session fields\n    p.domain_sessionid,\n    p.domain_sessionidx,\n\n    row_number() over (partition by p.domain_sessionid order by p.derived_tstamp, p.dvce_created_tstamp) AS page_view_in_session_index,\n\n    -- timestamp fields\n    p.dvce_created_tstamp,\n    p.collector_tstamp,\n    p.derived_tstamp,\n    p.start_tstamp,\n    coalesce(t.end_tstamp, p.derived_tstamp) as end_tstamp, -- only page views with pings will have a row in table t\n    \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n as model_tstamp,\n\n    coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s, -- where there are no pings, engaged time is 0.\n    timediff(second, p.derived_tstamp, coalesce(t.end_tstamp, p.derived_tstamp))  as absolute_time_in_s,\n\n    sd.hmax as horizontal_pixels_scrolled,\n    sd.vmax as vertical_pixels_scrolled,\n\n    sd.relative_hmax as horizontal_percentage_scrolled,\n    sd.relative_vmax as vertical_percentage_scrolled,\n\n    p.doc_width,\n    p.doc_height,\n\n    p.page_title,\n    p.page_url,\n    p.page_urlscheme,\n    p.page_urlhost,\n    p.page_urlpath,\n    p.page_urlquery,\n    p.page_urlfragment,\n\n    p.mkt_medium,\n    p.mkt_source,\n    p.mkt_term,\n    p.mkt_content,\n    p.mkt_campaign,\n    p.mkt_clickid,\n    p.mkt_network,\n\n    p.page_referrer,\n    p.refr_urlscheme,\n    p.refr_urlhost,\n    p.refr_urlpath,\n    p.refr_urlquery,\n    p.refr_urlfragment,\n    p.refr_medium,\n    p.refr_source,\n    p.refr_term,\n\n    p.geo_country,\n    p.geo_region,\n    p.geo_region_name,\n    p.geo_city,\n    p.geo_zipcode,\n    p.geo_latitude,\n    p.geo_longitude,\n    p.geo_timezone,\n\n    p.user_ipaddress,\n\n    p.useragent,\n\n    p.br_lang,\n    p.br_viewwidth,\n    p.br_viewheight,\n    p.br_colordepth,\n    p.br_renderengine,\n\n    p.os_timezone,\n\n    p.category,\n    p.primary_impact,\n    p.reason,\n    p.spider_or_robot,\n\n    p.useragent_family,\n    p.useragent_major,\n    p.useragent_minor,\n    p.useragent_patch,\n    p.useragent_version,\n    p.os_family,\n    p.os_major,\n    p.os_minor,\n    p.os_patch,\n    p.os_patch_minor,\n    p.os_version,\n    p.device_family,\n\n    p.device_class,\n    p.agent_class,\n    p.agent_name,\n    p.agent_name_version,\n    p.agent_name_version_major,\n    p.agent_version,\n    p.agent_version_major,\n    p.device_brand,\n    p.device_name,\n    p.device_version,\n    p.layout_engine_class,\n    p.layout_engine_name,\n    p.layout_engine_name_version,\n    p.layout_engine_name_version_major,\n    p.layout_engine_version,\n    p.layout_engine_version_major,\n    p.operating_system_class,\n    p.operating_system_name,\n    p.operating_system_name_version,\n    p.operating_system_version\n\n  from prep p\n\n  left join SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_engaged_time t\n  on p.page_view_id = t.page_view_id  and p.domain_sessionid = t.domain_sessionid \n\n  left join SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_scroll_depth sd\n  on p.page_view_id = sd.page_view_id  and p.domain_sessionid = sd.domain_sessionid \n)\n\nselect\n  pve.page_view_id,\n  pve.event_id,\n\n  pve.app_id,\n\n  -- user fields\n  pve.user_id,\n  pve.domain_userid,\n  pve.network_userid,\n\n  -- session fields\n  pve.domain_sessionid,\n  pve.domain_sessionidx,\n\n  pve.page_view_in_session_index,\n  max(pve.page_view_in_session_index) over (partition by pve.domain_sessionid) as page_views_in_session,\n\n  -- timestamp fields\n  pve.dvce_created_tstamp,\n  pve.collector_tstamp,\n  pve.derived_tstamp,\n  pve.start_tstamp,\n  pve.end_tstamp,\n  pve.model_tstamp,\n\n  pve.engaged_time_in_s,\n  pve.absolute_time_in_s,\n\n  pve.horizontal_pixels_scrolled,\n  pve.vertical_pixels_scrolled,\n\n  pve.horizontal_percentage_scrolled,\n  pve.vertical_percentage_scrolled,\n\n  pve.doc_width,\n  pve.doc_height,\n\n  pve.page_title,\n  pve.page_url,\n  pve.page_urlscheme,\n  pve.page_urlhost,\n  pve.page_urlpath,\n  pve.page_urlquery,\n  pve.page_urlfragment,\n\n  pve.mkt_medium,\n  pve.mkt_source,\n  pve.mkt_term,\n  pve.mkt_content,\n  pve.mkt_campaign,\n  pve.mkt_clickid,\n  pve.mkt_network,\n\n  pve.page_referrer,\n  pve.refr_urlscheme,\n  pve.refr_urlhost,\n  pve.refr_urlpath,\n  pve.refr_urlquery,\n  pve.refr_urlfragment,\n  pve.refr_medium,\n  pve.refr_source,\n  pve.refr_term,\n\n  pve.geo_country,\n  pve.geo_region,\n  pve.geo_region_name,\n  pve.geo_city,\n  pve.geo_zipcode,\n  pve.geo_latitude,\n  pve.geo_longitude,\n  pve.geo_timezone,\n\n  pve.user_ipaddress,\n\n  pve.useragent,\n\n  pve.br_lang,\n  pve.br_viewwidth,\n  pve.br_viewheight,\n  pve.br_colordepth,\n  pve.br_renderengine,\n\n  pve.os_timezone,\n\n  pve.category,\n  pve.primary_impact,\n  pve.reason,\n  pve.spider_or_robot,\n\n  pve.useragent_family,\n  pve.useragent_major,\n  pve.useragent_minor,\n  pve.useragent_patch,\n  pve.useragent_version,\n  pve.os_family,\n  pve.os_major,\n  pve.os_minor,\n  pve.os_patch,\n  pve.os_patch_minor,\n  pve.os_version,\n  pve.device_family,\n\n  pve.device_class,\n  pve.agent_class,\n  pve.agent_name,\n  pve.agent_name_version,\n  pve.agent_name_version_major,\n  pve.agent_version,\n  pve.agent_version_major,\n  pve.device_brand,\n  pve.device_name,\n  pve.device_version,\n  pve.layout_engine_class,\n  pve.layout_engine_name,\n  pve.layout_engine_name_version,\n  pve.layout_engine_name_version_major,\n  pve.layout_engine_version,\n  pve.layout_engine_version_major,\n  pve.operating_system_class,\n  pve.operating_system_name,\n  pve.operating_system_name_version,\n  pve.operating_system_version\n\nfrom page_view_events pve", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.570509Z", "completed_at": "2023-11-27T16:55:40.576983Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.578540Z", "completed_at": "2023-11-27T16:55:40.578575Z"}], "thread_id": "Thread-4", "execution_time": 0.021152019500732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_pv_scroll_depth_page_view_id.5e70f95d64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_scroll_depth\nwhere page_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.582966Z", "completed_at": "2023-11-27T16:55:40.589276Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.590847Z", "completed_at": "2023-11-27T16:55:40.590854Z"}], "thread_id": "Thread-4", "execution_time": 0.010596752166748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_pv_scroll_depth__page_view_id_domain_sessionid_.ae39dfe19b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (page_view_id || '-' || domain_sessionid) as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_pv_scroll_depth\nwhere (page_view_id || '-' || domain_sessionid) is not null\ngroup by (page_view_id || '-' || domain_sessionid)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.509860Z", "completed_at": "2023-11-27T16:55:40.487019Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.490146Z", "completed_at": "2023-11-27T16:55:40.490154Z"}], "thread_id": "Thread-1", "execution_time": 1.234534502029419, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_paths_to_non_conversion_actual_ref_snowplow_fractribution_paths_to_non_conversion_expected_stg___4.28a46bb7e1", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_paths_to_non_conversion_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.746529Z", "completed_at": "2023-11-27T16:55:40.752331Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.753865Z", "completed_at": "2023-11-27T16:55:40.753875Z"}], "thread_id": "Thread-1", "execution_time": 0.010179519653320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_absolute_time_in_s.54893adc18", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect absolute_time_in_s\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere absolute_time_in_s is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.758421Z", "completed_at": "2023-11-27T16:55:40.763812Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.765336Z", "completed_at": "2023-11-27T16:55:40.765343Z"}], "thread_id": "Thread-1", "execution_time": 0.009632587432861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_collector_tstamp.3382a3c260", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collector_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere collector_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.769826Z", "completed_at": "2023-11-27T16:55:40.776034Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.777545Z", "completed_at": "2023-11-27T16:55:40.777552Z"}], "thread_id": "Thread-1", "execution_time": 0.010420083999633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_derived_tstamp.c845283a13", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect derived_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere derived_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.782000Z", "completed_at": "2023-11-27T16:55:40.788956Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.790756Z", "completed_at": "2023-11-27T16:55:40.790766Z"}], "thread_id": "Thread-1", "execution_time": 0.011537313461303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_domain_sessionid.8c6f26a143", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect domain_sessionid\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.797002Z", "completed_at": "2023-11-27T16:55:40.802260Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.803826Z", "completed_at": "2023-11-27T16:55:40.803833Z"}], "thread_id": "Thread-1", "execution_time": 0.009966850280761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_domain_sessionidx.69a8717c74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect domain_sessionidx\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere domain_sessionidx is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.808319Z", "completed_at": "2023-11-27T16:55:40.813382Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.814930Z", "completed_at": "2023-11-27T16:55:40.814937Z"}], "thread_id": "Thread-1", "execution_time": 0.009325265884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_dvce_created_tstamp.40e528d602", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dvce_created_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere dvce_created_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.819396Z", "completed_at": "2023-11-27T16:55:40.824434Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.825944Z", "completed_at": "2023-11-27T16:55:40.825951Z"}], "thread_id": "Thread-1", "execution_time": 0.010384082794189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_end_tstamp.56229099fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere end_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.832143Z", "completed_at": "2023-11-27T16:55:40.844796Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.847766Z", "completed_at": "2023-11-27T16:55:40.847776Z"}], "thread_id": "Thread-1", "execution_time": 0.01934027671813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_engaged_time_in_s.347bdb2071", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engaged_time_in_s\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere engaged_time_in_s is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.852883Z", "completed_at": "2023-11-27T16:55:40.858007Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.859556Z", "completed_at": "2023-11-27T16:55:40.859562Z"}], "thread_id": "Thread-1", "execution_time": 0.009367942810058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_event_id.8f03269031", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.863964Z", "completed_at": "2023-11-27T16:55:40.868953Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.870466Z", "completed_at": "2023-11-27T16:55:40.870473Z"}], "thread_id": "Thread-1", "execution_time": 0.009423255920410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_url.5d2cf56a0b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_url\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere page_url is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.875303Z", "completed_at": "2023-11-27T16:55:40.880967Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.882515Z", "completed_at": "2023-11-27T16:55:40.882522Z"}], "thread_id": "Thread-1", "execution_time": 0.010200023651123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_view_id.cc0f0d96b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere page_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.887649Z", "completed_at": "2023-11-27T16:55:40.903964Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.905638Z", "completed_at": "2023-11-27T16:55:40.905645Z"}], "thread_id": "Thread-1", "execution_time": 0.021494388580322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_view_in_session_index.c7826944c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_in_session_index\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere page_view_in_session_index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.910171Z", "completed_at": "2023-11-27T16:55:40.915168Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.916685Z", "completed_at": "2023-11-27T16:55:40.916691Z"}], "thread_id": "Thread-1", "execution_time": 0.00925898551940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_page_views_in_session.8d647c2332", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_views_in_session\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere page_views_in_session is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.921039Z", "completed_at": "2023-11-27T16:55:40.926150Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.927684Z", "completed_at": "2023-11-27T16:55:40.927691Z"}], "thread_id": "Thread-1", "execution_time": 0.009308576583862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_this_run_start_tstamp.f397976d5e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere start_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.932066Z", "completed_at": "2023-11-27T16:55:40.936948Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.938457Z", "completed_at": "2023-11-27T16:55:40.938464Z"}], "thread_id": "Thread-1", "execution_time": 0.009172201156616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_this_run_event_id.42096b7aa3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.942883Z", "completed_at": "2023-11-27T16:55:40.949521Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:40.952245Z", "completed_at": "2023-11-27T16:55:40.952255Z"}], "thread_id": "Thread-1", "execution_time": 0.012913227081298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_this_run_page_view_id.265385eac0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    page_view_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere page_view_id is not null\ngroup by page_view_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.267370Z", "completed_at": "2023-11-27T16:55:41.234181Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.235825Z", "completed_at": "2023-11-27T16:55:41.235837Z"}], "thread_id": "Thread-3", "execution_time": 1.1809587478637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_fractribution_integration_tests.snowplow_fractribution_integration_tests_equality_snowplow_fractribution_path_summary_actual_ref_snowplow_fractribution_path_summary_expected_stg___4.49d6fa3e75", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_snplw_fractribution_int_tests.snowplow_fractribution_path_summary_expected_stg\n\n),\n\na_minus_b as (\n\n    select  from a\n    \n\n    except\n\n\n    select  from b\n\n),\n\nb_minus_a as (\n\n    select  from b\n    \n\n    except\n\n\n    select  from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:40.595254Z", "completed_at": "2023-11-27T16:55:41.321167Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.322821Z", "completed_at": "2023-11-27T16:55:41.322831Z"}], "thread_id": "Thread-4", "execution_time": 0.9955589771270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_web.snowplow_web_page_views", "compiled": true, "compiled_code": "\n\n\nselect *\n  \nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_scratch.snowplow_web_page_views_this_run\nwhere cast(True as boolean) --returns false if run doesn't contain new events.", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.597883Z", "completed_at": "2023-11-27T16:55:41.616238Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.620300Z", "completed_at": "2023-11-27T16:55:41.620312Z"}], "thread_id": "Thread-1", "execution_time": 0.030437707901000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_absolute_time_in_s.b0bdaac0aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect absolute_time_in_s\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere absolute_time_in_s is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.609558Z", "completed_at": "2023-11-27T16:55:41.617125Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.621854Z", "completed_at": "2023-11-27T16:55:41.621861Z"}], "thread_id": "Thread-4", "execution_time": 0.02893686294555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_derived_tstamp.936b5957b7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect derived_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere derived_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.604416Z", "completed_at": "2023-11-27T16:55:41.618762Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.623943Z", "completed_at": "2023-11-27T16:55:41.623950Z"}], "thread_id": "Thread-3", "execution_time": 0.03304791450500488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_collector_tstamp.eebfc2e362", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect collector_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere collector_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.634418Z", "completed_at": "2023-11-27T16:55:41.650547Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.652334Z", "completed_at": "2023-11-27T16:55:41.652342Z"}], "thread_id": "Thread-1", "execution_time": 0.0250856876373291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_domain_sessionid.d171abf764", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect domain_sessionid\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere domain_sessionid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.640258Z", "completed_at": "2023-11-27T16:55:41.653193Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.658403Z", "completed_at": "2023-11-27T16:55:41.658411Z"}], "thread_id": "Thread-4", "execution_time": 0.030314922332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_domain_sessionidx.e2c23f3f73", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect domain_sessionidx\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere domain_sessionidx is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.645240Z", "completed_at": "2023-11-27T16:55:41.655254Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.660240Z", "completed_at": "2023-11-27T16:55:41.660248Z"}], "thread_id": "Thread-3", "execution_time": 0.030564546585083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_dvce_created_tstamp.f9ef0a90e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dvce_created_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere dvce_created_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.665283Z", "completed_at": "2023-11-27T16:55:41.673418Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.687471Z", "completed_at": "2023-11-27T16:55:41.687480Z"}], "thread_id": "Thread-1", "execution_time": 0.029499530792236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_end_tstamp.49df31f6f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere end_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.676487Z", "completed_at": "2023-11-27T16:55:41.690726Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.695590Z", "completed_at": "2023-11-27T16:55:41.695597Z"}], "thread_id": "Thread-4", "execution_time": 0.031119823455810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_engaged_time_in_s.3e4b8848b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect engaged_time_in_s\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere engaged_time_in_s is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.682437Z", "completed_at": "2023-11-27T16:55:41.692487Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.701286Z", "completed_at": "2023-11-27T16:55:41.701294Z"}], "thread_id": "Thread-3", "execution_time": 0.03138017654418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_event_id.af9403c39f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.696419Z", "completed_at": "2023-11-27T16:55:41.705584Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.710900Z", "completed_at": "2023-11-27T16:55:41.710911Z"}], "thread_id": "Thread-1", "execution_time": 0.026314973831176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_url.8dddde87ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_url\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere page_url is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.712482Z", "completed_at": "2023-11-27T16:55:41.724856Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.729139Z", "completed_at": "2023-11-27T16:55:41.729147Z"}], "thread_id": "Thread-4", "execution_time": 0.029829740524291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_view_id.ed9780c9ab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_id\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere page_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.718938Z", "completed_at": "2023-11-27T16:55:41.728320Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.738335Z", "completed_at": "2023-11-27T16:55:41.738343Z"}], "thread_id": "Thread-3", "execution_time": 0.03221416473388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_view_in_session_index.a624a66afc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_view_in_session_index\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere page_view_in_session_index is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.729967Z", "completed_at": "2023-11-27T16:55:41.740229Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.745739Z", "completed_at": "2023-11-27T16:55:41.745748Z"}], "thread_id": "Thread-1", "execution_time": 0.02703070640563965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_page_views_in_session.90627e03fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect page_views_in_session\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere page_views_in_session is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.747547Z", "completed_at": "2023-11-27T16:55:41.759483Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.762978Z", "completed_at": "2023-11-27T16:55:41.762986Z"}], "thread_id": "Thread-4", "execution_time": 0.026516199111938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.not_null_snowplow_web_page_views_start_tstamp.f0205359bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere start_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.755646Z", "completed_at": "2023-11-27T16:55:41.769910Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.775096Z", "completed_at": "2023-11-27T16:55:41.775104Z"}], "thread_id": "Thread-3", "execution_time": 0.03119349479675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.snowplow_tests_page_view_in_session_values", "compiled": true, "compiled_code": "with prep as (\n  select \n    domain_sessionid, \n    count(distinct page_views_in_session) as dist_pvis_values,\n    count(*) - count(distinct page_view_in_session_index)  as all_minus_dist_pvisi,\n    count(*) - count(distinct page_view_id) as all_minus_dist_pvids \n\n  from SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\n  group by 1\n)\n\nselect\n  domain_sessionid\n\nfrom prep\n\nwhere dist_pvis_values != 1\nor all_minus_dist_pvisi != 0\nor all_minus_dist_pvids != 0", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.763838Z", "completed_at": "2023-11-27T16:55:41.771806Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.776682Z", "completed_at": "2023-11-27T16:55:41.776692Z"}], "thread_id": "Thread-1", "execution_time": 0.024579286575317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_event_id.874efe18e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:41.778754Z", "completed_at": "2023-11-27T16:55:41.786257Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:41.788439Z", "completed_at": "2023-11-27T16:55:41.788446Z"}], "thread_id": "Thread-4", "execution_time": 0.016188621520996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_web.unique_snowplow_web_page_views_page_view_id.d0551e11d8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    page_view_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_web_page_views\nwhere page_view_id is not null\ngroup by page_view_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-27T16:55:39.118077Z", "completed_at": "2023-11-27T16:55:44.444332Z"}, {"name": "execute", "started_at": "2023-11-27T16:55:44.445916Z", "completed_at": "2023-11-27T16:55:44.445926Z"}], "thread_id": "Thread-2", "execution_time": 5.544529914855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_fractribution.snowplow_fractribution_call_snowpark_macros", "compiled": true, "compiled_code": "--This model is only used when the attribution package is run on Snowflake and the Python script will be run using Snowpark, rather than manually.\n\n\n-- depends_on: SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_path_summary\n-- depends_on: SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_channel_spend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\nWith table_1 as (\n    SELECT\n        'gh_sp_fract_dbt_1_derived' as schema_name,\n         'snowplow_fractribution_path_summary_with_channels' as table_name,\n        '2023-11-27 16:55:44' as last_run_time\n),\ntable_2 as (\n    SELECT\n        'gh_sp_fract_dbt_1_derived' as schema_name,\n         'snowplow_fractribution_channel_attribution' as table_name,\n        '2023-11-27 16:55:44' as last_run_time\n),\ntable_3 as (\n    SELECT\n        'gh_sp_fract_dbt_1_derived' as schema_name,\n         'snowplow_fractribution_report_table' as table_name,\n        '2023-11-27 16:55:44' as last_run_time\n)\nSELECT * FROM table_1\nUNION ALL\nSELECT * FROM table_2\nUNION ALL\nSELECT * FROM table_3\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_fract_dbt_1_derived.snowplow_fractribution_call_snowpark_macros"}], "elapsed_time": 11.718617677688599, "args": {"invocation_command": "dbt docs generate", "enable_legacy_logger": false, "static": false, "version_check": true, "write_json": true, "exclude": [], "log_path": "/home/runner/work/dbt-snowplow-fractribution/dbt-snowplow-fractribution/integration_tests/logs", "partial_parse": true, "macro_debugging": false, "profiles_dir": "./ci", "cache_selected_only": false, "log_file_max_bytes": 10485760, "printer_width": 80, "defer": false, "strict_mode": false, "populate_cache": true, "log_format_file": "debug", "log_format": "default", "show_resource_report": false, "compile": true, "vars": {}, "favor_state": false, "send_anonymous_usage_stats": false, "indirect_selection": "eager", "partial_parse_file_diff": true, "project_dir": "/home/runner/work/dbt-snowplow-fractribution/dbt-snowplow-fractribution/integration_tests", "warn_error_options": {"include": [], "exclude": []}, "empty_catalog": false, "which": "generate", "log_level_file": "debug", "quiet": false, "log_level": "info", "introspect": true, "use_colors": true, "use_colors_file": true, "select": [], "static_parser": true, "print": true}}